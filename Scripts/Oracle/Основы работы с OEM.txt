OEM 

НЕ ЗАБЫТЬ ВКЛЮЧИТЬ ЗАПИСЬ СЕМИНАРА !!!

1. Обзор архитектуры
2. Функционал для ежедневной работы
3. Базовые вопросы анализа производительности

Практика 1 - Блокировка сессий (Blocking Sessions)

drop user test_usr cascade;
create user test_usr identified by Zz123456;
alter user test_usr quota unlimited on users;
grant create session to test_usr;

create table test_usr.t1(c1 number, c2 varchar2(10));

begin
  for i in 1 .. 10 loop
    insert into test_usr.t1 values (i, dbms_random.string('L', 10));
  end loop;
  commit;
end;
/

Сессия 1
sqlplus test_usr/Zz123456@angel19
update test_usr.t1 set c2='aaa' where c1=10;

Сессия 2
sqlplus test_usr/Zz123456@angel19
update test_usr.t1 set c2='bbb' where c1=10;

Смотрим инфо о блокировке в Perfomance => Blocking Sessions 

Видим что вторая сессия заблокирована с ождинаием enq: TX - row lock contention - ожидание блокировки строки.

Сессия 1
rollback;

проверяем отсутствие блокировки

Сессия 2
может подтвердить или откатить свою транзакцию 
commit;

Сессия 1
видит данные внесенные сессией 2 после комита
select c2 from test_usr.t1 where c1=10;

Аналогичный эффект при явной блокировке таблицы, в одной из сессий выполнить 
lock table test_usr.t1 in exclusive mode;

Что важно: 
- kill сессий выполнять только по согласованию с командой проекта , часто бывает что разработчик внес изменения и не выдал commit, как в нашем случае
- имеет смысл обращать на блокировки в обращениях когда какой-то функционал перестал работать но при этом нет ошибок в алерт логе и нет нагрузки на сервере (низакая загрузка cpu, не высокий i/o, присутсствует свободная ram)  
- в реально нагруженной БД сессий и блокировок может быть очень много, и если блокировок много, это может быть проблема с логикой приложения, т.е. попытки изменять одновременно одни и теже данные 

Практика 2 - Тюнинг запроса (Tuning Advisor)

create table test_usr.big_table (idc NUMBER GENERATED ALWAYS AS IDENTITY,
   owner varchar2(100),
   object_name varchar2(200),
   object_id number,
   object_type varchar2(100),
   created date,
   last_ddl_time date,
   status varchar2(100));

declare
n number := 1;
begin
  loop
    exit when n = 5;
insert into test_usr.big_table (owner, object_name, object_id, object_type, created, last_ddl_time, status) (select owner, object_name, object_id, object_type, created, last_ddl_time, status
 from dba_objects);
commit;
n := n +1;
end loop;
end;

select count(*) from test_usr.big_table;
select * from test_usr.big_table order by idc fetch first 100 rows only;

declare
v1 number;
v2 number;
v_sql varchar2(500);
begin
  for i in 1 .. 10 loop
  v1 := round(dbms_random.value(1, 100));
v_sql := 'select idc from test_usr.big_table where idc = :v1';
execute immediate v_sql into v2 using v1;
dbms_output.put_line(v2);
    end loop;
EXCEPTION
  WHEN no_data_found THEN
    dbms_output.put_line('exc ' || v1);
end;

select *
  from v$sql s
 where s.SQL_TEXT = 'select idc from test_usr.big_table where idc = :v1';

alter system flush shared_pool;

Запускаем perf_test.sh 
./perf_test.sh angel19
ps -ef | grep perf_test | grep -v grep

1. Идём в ASH Analytics где видим наш запрос и 5-ть сессий его выполняющих
2. Идём в Perfomance Home и строим отчет ASH в котором смотрим секции Top SQL with Top Events и Top Sessions  
3. Упомянуть про отчеты AWR и пояснить разницу когда стоит смотреть AWR, а когда ASH
4. AWR подробно рассматривается в https://wiki.x5.ru/pages/viewpage.action?pageId=214737181 
5. Посмотрим статистики выполнения по топовому запросу, Search SQL поиск по sql_id
6. Полезные вкладки Statistic и Activity, тут так же можно вызвать тюнинг Tuninig Advisor, алтернативно Tuninig Advisor можно вызывать из ASH Analytics
7. Вызываем Tuninig Advisor
8. По результатам тюнинга видим очевидную рекомендацию посторить индекс. 
9. Cравниваем планы и видим на сколько дешевле стал cost
10. Рекомендации по индексу передаем разработчикам

4. Вопросы от 2-й линии

